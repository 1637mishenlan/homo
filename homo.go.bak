package main

import (
	"bytes"
	"encoding/binary"
	"github.com/countstarlight/homo/module/com"
	"github.com/sirupsen/logrus"
	"time"

	"github.com/brentnd/go-snowboy"
	"github.com/gordonklaus/portaudio"
)

type Sound struct {
	stream *portaudio.Stream
	data   []int16
}

func (s *Sound) Read(p []byte) (int, error) {
	err := s.stream.Read()
	if err != nil {
		logrus.Warnf("Read stream failed: %s", err.Error())
		return 0, err
	}

	buf := &bytes.Buffer{}
	for _, v := range s.data {
		err = binary.Write(buf, binary.LittleEndian, v)
		if err != nil {
			logrus.Warnf("Write buffer failed: %s", err.Error())
			return 0, err
		}
	}
	copy(p, buf.Bytes())
	return len(p), nil
}

func main() {
	// Set logrus format
	customFormatter := new(logrus.TextFormatter)
	customFormatter.TimestampFormat = "15:04:05"
	// Show colorful on windows
	customFormatter.ForceColors = true
	logrus.SetFormatter(customFormatter)
	customFormatter.FullTimestamp = true
	logrus.Infof("Homo v0.0.1")
	inputChannels := 1
	outputChannels := 0
	sampleRate := 44100
	framesPerBuffer := make([]int16, 1024)

	err := portaudio.Initialize()
	if err != nil {
		logrus.Fatalf("Initial portaudio failed: %s", err.Error())
	}
	devicesInfo,err := portaudio.Devices()
	if err != nil {
		logrus.Fatalf("PortAudio get all devices info failed: %s", err.Error())
	}
	for _, d := range devicesInfo {
		logrus.Infof("Name: %s\t DefaultSampleRate: %f\tMaxInputChannels: %d\tMaxOutputChannels: %d\n", d.Name, d.DefaultSampleRate, d.MaxInputChannels, d.MaxOutputChannels)
	}
	defer func() {
		if err := portaudio.Terminate(); err != nil {
			logrus.Fatalf("Close portaudio failed: %s", err.Error())
		}
	}()

	stream, err := portaudio.OpenDefaultStream(inputChannels, outputChannels, float64(sampleRate), len(framesPerBuffer), framesPerBuffer)
	if err != nil {
		logrus.Fatalf("Open default stream failed: %s", err.Error())
	}
	defer com.IOClose("Portaudio default stream",stream)

	d := snowboy.NewDetector("/home/countstarlight/data/Documents/snowboy/resources/common.res")
	defer func() {
		if err := d.Close(); err != nil {
			logrus.Fatalf("Close snowboy detector failed: %s", err.Error())
		}
	}()

	d.HandleFunc(snowboy.NewHotword("/home/countstarlight/data/Documents/snowboy/resources/models/snowboy.umdl", 0.5), func(string) {
		logrus.Infoln("Handle func in snowboy.NewDefaultHotword")
	})

	d.HandleSilenceFunc(500*time.Millisecond, func(string) {
		logrus.Infoln("silence detected")
	})

	sr, nc, bd := d.AudioFormat()
	logrus.Infof("sample rate=%d, num channels=%d, bit depth=%d\n", sr, nc, bd)

	err = stream.Start()
	if err != nil {
		logrus.Fatalf("Start stream failed: %s", err.Error())
	}

	sounder := &Sound{stream, framesPerBuffer}

	err = d.ReadAndDetect(sounder)
	if err != nil {
		logrus.Fatalf("ReadAndDetect failed: %s", err.Error())
	}
}